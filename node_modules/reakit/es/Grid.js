import { c as _taggedTemplateLiteralLoose } from './chunk-eb25cfa0.js';
import { theme } from 'styled-tools';
import 'styled-components';
import styled from './styled.js';
import 'reuse';
import use from './use.js';
import 'react';
import { oneOfType, string, number, bool as bool$1 } from 'prop-types';
import './chunk-afcdbe83.js';
import { c as bool, i as value } from './chunk-1128464e.js';
import Box from './Box.js';
import '@emotion/is-prop-valid';

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  display: grid;\n  &&& {\n    ", "\n    ", "\n    ", "\n    ", "\n    ", "\n    ", "\n    ", "\n    ", "\n  }\n  ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var Grid = styled(Box)(_templateObject(), bool("grid-auto-flow", ["row", "column", "dense"]), value("grid-gap", "gap"), value("grid-template", "template"), value("grid-template-areas", "templateAreas"), value("grid-template-columns", "templateColumns"), value("grid-template-rows", "templateRows"), value("grid-auto-columns", "autoColumns"), value("grid-auto-rows", "autoRows"), theme("Grid"));
var valueType = oneOfType([string, number]); // @ts-ignore

Grid.propTypes = {
  row: bool$1,
  column: bool$1,
  dense: bool$1,
  gap: valueType,
  template: valueType,
  templateAreas: valueType,
  templateColumns: valueType,
  templateRows: valueType,
  autoColumns: valueType,
  autoRows: valueType
};
var Grid$1 = use(Grid, "div");

function _templateObject$1() {
  var data = _taggedTemplateLiteralLoose(["\n  &&& {\n    ", ";\n    ", ";\n    ", ";\n    ", ";\n    ", ";\n    ", ";\n    ", ";\n  }\n  ", ";\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var GridItem = styled(Box)(_templateObject$1(), value("grid-area", "area"), value("grid-column", "column"), value("grid-row", "row"), value("grid-column-start", "columnStart"), value("grid-column-end", "columnEnd"), value("grid-row-start", "rowStart"), value("grid-row-end", "rowEnd"), theme("GridItem"));
var valueType$1 = oneOfType([string, number]); // @ts-ignore

GridItem.propTypes = {
  area: valueType$1,
  column: valueType$1,
  row: valueType$1,
  columnStart: valueType$1,
  columnEnd: valueType$1,
  rowStart: valueType$1,
  rowEnd: valueType$1
};
var GridItem$1 = use(GridItem, "div");

var index = Object.assign(Grid$1, {
  Item: GridItem$1
});

export default index;
