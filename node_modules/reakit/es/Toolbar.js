import { c as _taggedTemplateLiteralLoose, d as _extends, e as _inheritsLoose, f as _defineProperty, g as _assertThisInitialized } from './chunk-eb25cfa0.js';
import { withProp, theme, prop } from 'styled-tools';
import 'styled-components';
import styled from './styled.js';
import 'reuse';
import use from './use.js';
import { createElement, Component } from 'react';
import { oneOfType, number, string, bool, oneOf, func } from 'prop-types';
import { a as numberToPx } from './chunk-afcdbe83.js';
import './chunk-1128464e.js';
import Box from './Box.js';
import '@emotion/is-prop-valid';
import { findDOMNode } from 'react-dom';
import { a as hoist } from './chunk-0cd02bff.js';
import { a as callAll } from './chunk-11bd1c20.js';
import s from 'styled-selector';

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  position: relative;\n  display: grid;\n  width: 100%;\n  padding: ", ";\n  grid-gap: ", ";\n  grid-template:\n    \"start center end\"\n    / 1fr auto 1fr;\n\n  &[aria-orientation=\"vertical\"] {\n    width: min-content;\n    height: 100%;\n    grid-template:\n      \"start\" 1fr\n      \"center\" auto\n      \"end\" 1fr;\n  }\n\n  ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var ToolbarComponent = function ToolbarComponent(props) {
  return createElement(Box, _extends({
    "aria-orientation": props.vertical ? "vertical" : "horizontal"
  }, props));
};

var Toolbar = styled(hoist(ToolbarComponent, Box))(_templateObject(), withProp("gutter", numberToPx), withProp("gutter", numberToPx), theme("Toolbar")); // @ts-ignore

Toolbar.propTypes = {
  gutter: oneOfType([number, string]),
  vertical: bool
};
Toolbar.defaultProps = {
  role: "toolbar",
  gutter: 8
};
var Toolbar$1 = use(Toolbar, "div");

function _templateObject$1() {
  var data = _taggedTemplateLiteralLoose(["\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: min-content;\n  grid-gap: inherit;\n  grid-area: ", ";\n  justify-content: ", ";\n  align-items: center;\n\n  [aria-orientation=\"vertical\"] > & {\n    grid-auto-flow: row;\n    grid-auto-rows: min-content;\n    justify-content: initial;\n    align-content: ", ";\n  }\n\n  ", ";\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var ToolbarContent = styled(Box)(_templateObject$1(), prop("align"), prop("align"), prop("align"), theme("ToolbarContent")); // @ts-ignore

ToolbarContent.propTypes = {
  align: oneOf(["start", "center", "end"])
};
ToolbarContent.defaultProps = {
  align: "start"
};
var ToolbarContent$1 = use(ToolbarContent, "div");

function _templateObject$2() {
  var data = _taggedTemplateLiteralLoose(["\n  ", ";\n"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}

var ToolbarFocusableComponent =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ToolbarFocusableComponent, _React$Component);

  function ToolbarFocusableComponent(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "element", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toolbar", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getInitialTabIndex", function () {
      var tabIndex = _this.props.tabIndex;
      return typeof tabIndex !== "undefined" ? tabIndex : -1;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getElement", function () {
      if (typeof _this.element === "undefined") {
        _this.element = findDOMNode(_assertThisInitialized(_assertThisInitialized(_this)));
      }

      return _this.element;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getToolbar", function () {
      if (typeof _this.toolbar === "undefined") {
        _this.toolbar = _this.getElement().closest(s(Toolbar$1));
      }

      return _this.toolbar;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getFocusables", function () {
      if (!_this.getToolbar()) return document.createDocumentFragment().childNodes;
      return _this.getToolbar().querySelectorAll(s(ToolbarFocusable));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getCurrentIndex", function (focusables) {
      var currentIndex = -1;
      focusables.forEach(function (item, i) {
        if (item === _this.getElement()) {
          currentIndex = i;
        }
      });
      return currentIndex;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getNextFocusable", function (focusables, currentIndex) {
      var index = currentIndex + 1;
      return focusables.item(index) || focusables.item(0);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getPreviousFocusable", function (focusables, currentIndex) {
      var index = currentIndex ? currentIndex - 1 : focusables.length - 1;
      return focusables.item(index);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toolbarIsVertical", function () {
      if (!_this.getToolbar()) return false;
      return _this.getToolbar().getAttribute("aria-orientation") === "vertical";
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "addKeyDownHandler", function () {
      if (!_this.getToolbar()) return;

      _this.getElement().addEventListener("keydown", _this.handleKeyDown);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "removeKeyDownHandler", function () {
      if (!_this.getToolbar()) return;

      _this.getElement().removeEventListener("keydown", _this.handleKeyDown);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyDown", function (e) {
      var isVertical = _this.toolbarIsVertical();

      var nextKey = isVertical ? "ArrowDown" : "ArrowRight";
      var previousKey = isVertical ? "ArrowUp" : "ArrowLeft";
      var willPerformEvent = [nextKey, previousKey].indexOf(e.key) >= 0;
      if (!willPerformEvent) return;

      var focusables = _this.getFocusables();

      var currentIndex = _this.getCurrentIndex(focusables);

      e.preventDefault();

      _this.setState({
        tabIndex: _this.getInitialTabIndex()
      });

      if (e.key === nextKey) {
        _this.getNextFocusable(focusables, currentIndex).focus();
      } else {
        _this.getPreviousFocusable(focusables, currentIndex).focus();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFocus", function () {
      _this.setState({
        tabIndex: 0
      });
    });

    _this.state = {
      tabIndex: _this.getInitialTabIndex()
    };
    return _this;
  }

  var _proto = ToolbarFocusableComponent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.getCurrentIndex(this.getFocusables()) === 0) {
      this.setState({
        tabIndex: 0
      });
    }

    if (!this.props.disabled) {
      this.addKeyDownHandler();
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var disabled = this.props.disabled;

    if (prevProps.disabled !== disabled) {
      if (disabled) {
        this.removeKeyDownHandler();
      } else {
        this.addKeyDownHandler();
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.removeKeyDownHandler();
  };

  _proto.render = function render() {
    return createElement(Box, _extends({}, this.props, {
      onFocus: callAll(this.handleFocus, this.props.onFocus),
      tabIndex: this.state.tabIndex
    }));
  };

  return ToolbarFocusableComponent;
}(Component);

var ToolbarFocusable = styled(hoist(ToolbarFocusableComponent, Box))(_templateObject$2(), theme("ToolbarFocusable")); // @ts-ignore

ToolbarFocusable.propTypes = {
  tabIndex: number,
  onFocus: func,
  disabled: bool
};
var ToolbarFocusable$1 = use(ToolbarFocusable, "div");

var index = Object.assign(Toolbar$1, {
  Content: ToolbarContent$1,
  Focusable: ToolbarFocusable$1
});

export default index;
