import { c as _taggedTemplateLiteralLoose, a as _objectWithoutPropertiesLoose, d as _extends } from './chunk-eb25cfa0.js';
import { theme } from 'styled-tools';
import styled from './styled.js';
import use from './use.js';
import { createElement, forwardRef } from 'react';
import { func } from 'prop-types';
import Box from './Box.js';
import { a as hoist } from './chunk-0cd02bff.js';
import { a as callAll } from './chunk-11bd1c20.js';

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var HiddenHideComponent = function HiddenHideComponent(_ref) {
  var onClick = _ref.onClick,
      props = _objectWithoutPropertiesLoose(_ref, ["onClick"]);

  return createElement(Box, _extends({
    onClick: callAll(props.hide, onClick)
  }, props));
};

var HiddenHide = styled(hoist(HiddenHideComponent, Box))(_templateObject(), theme("HiddenHide")); // @ts-ignore

HiddenHide.propTypes = {
  hide: func.isRequired,
  onClick: func
};
var HiddenHide$1 = use(HiddenHide, "button");

function _templateObject$1() {
  var data = _taggedTemplateLiteralLoose(["\n  ", ";\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}

var HiddenShowComponent = function HiddenShowComponent(_ref) {
  var onClick = _ref.onClick,
      props = _objectWithoutPropertiesLoose(_ref, ["onClick"]);

  return createElement(Box, _extends({
    onClick: callAll(props.show, onClick)
  }, props));
};

var HiddenShow = styled(hoist(HiddenShowComponent, Box))(_templateObject$1(), theme("HiddenShow")); // @ts-ignore

HiddenShow.propTypes = {
  show: func.isRequired,
  onClick: func
};
var HiddenShow$1 = use(HiddenShow, "button");

function _templateObject$2() {
  var data = _taggedTemplateLiteralLoose(["\n  ", ";\n"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var HiddenToggleComponent = forwardRef(function (_ref, ref) {
  var onClick = _ref.onClick,
      props = _objectWithoutPropertiesLoose(_ref, ["onClick"]);

  return createElement(Box, _extends({
    onClick: callAll(props.toggle, onClick)
  }, props, {
    ref: ref
  }));
});
var HiddenToggle = styled(hoist(HiddenToggleComponent, Box))(_templateObject$2(), theme("HiddenToggle")); // @ts-ignore

HiddenToggle.propTypes = {
  toggle: func.isRequired,
  onClick: func
};
var HiddenToggle$1 = use(HiddenToggle, "button");

export { HiddenHide$1 as a, HiddenShow$1 as b, HiddenToggle$1 as c };
