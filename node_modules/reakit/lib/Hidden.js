'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var __chunk_1 = require('./chunk-4a9d70be.js');
var styledTools = require('styled-tools');
var styled = require('styled-components');
var styled__default = _interopDefault(styled);
var styled$1 = require('./styled.js');
require('reuse');
var use$1 = require('./use.js');
var React = require('react');
var PropTypes = require('prop-types');
require('./chunk-1cbeb596.js');
var __chunk_3 = require('./chunk-e7befa1f.js');
var Box = require('./Box.js');
require('@emotion/is-prop-valid');
var ReactDOM = require('react-dom');
var __chunk_4 = require('./chunk-fa7792e6.js');
var __chunk_5 = require('./chunk-c40dcb9e.js');
require('constate');
var __chunk_6 = require('./chunk-9a6ca4f6.js');
var __chunk_7 = require('./chunk-b0c0085a.js');

function _templateObject3() {
  var data = __chunk_1._taggedTemplateLiteralLoose(["\n        transform: ", " ", ";\n        visibility: hidden;\n        will-change: transform, opacity;\n      "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = __chunk_1._taggedTemplateLiteralLoose(["\n      transform-origin: ", ";\n      transition: all ", " ", " ", ";\n    "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = __chunk_1._taggedTemplateLiteralLoose(["\n  transform: ", ";\n  ", ";\n\n  &[aria-hidden=\"true\"] {\n    pointer-events: none;\n\n    ", ";\n\n    ", ";\n  }\n\n  ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var HiddenComponent =
/*#__PURE__*/
function (_React$Component) {
  __chunk_1._inheritsLoose(HiddenComponent, _React$Component);

  function HiddenComponent() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "state", {
      visible: _this.props.visible,
      transitioning: _this.props.transitioning
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "applyState", function () {
      var _this$props = _this.props,
          visible = _this$props.visible,
          unmount = _this$props.unmount;

      if (typeof window !== "undefined" && unmount && __chunk_3.hasTransition(_this.props)) {
        if (visible) {
          _this.setState({
            transitioning: true
          });

          requestAnimationFrame(function () {
            return (// it may be still transitioning, but it doesn't matter
              // we just need to set it to false in another loop
              _this.setState({
                transitioning: false,
                visible: true
              })
            );
          });
        } else {
          _this.setState({
            visible: false,
            transitioning: true
          });
        }
      } else {
        _this.setState({
          visible: visible
        });
      }
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "handleTransitionEnd", function () {
      var _this$props2 = _this.props,
          visible = _this$props2.visible,
          unmount = _this$props2.unmount;

      if (unmount && !visible) {
        // at this point, this is the last state left to return null on render
        _this.setState({
          transitioning: false
        });
      }
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "handleKeyDown", function (e) {
      var _this$props3 = _this.props,
          visible = _this$props3.visible,
          hide = _this$props3.hide;

      if (e.key === "Escape" && visible && hide) {
        hide();
      }
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "handleClickOutside", function (e) {
      var node = ReactDOM.findDOMNode(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)));
      var _this$props4 = _this.props,
          hide = _this$props4.hide,
          visible = _this$props4.visible;
      var shouldHide = node instanceof Element && !node.contains(e.target) && visible && hide;

      if (shouldHide) {
        // it's possible that the outside click was on a toggle button
        // in that case, we should "wait" before hiding it
        // otherwise it could hide before and then toggle, showing it again
        setTimeout(function () {
          return _this.props.visible && hide && hide();
        });
      }
    });

    return _this;
  }

  var _proto = HiddenComponent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$props5 = this.props,
        hideOnEsc = _this$props5.hideOnEsc,
        hideOnClickOutside = _this$props5.hideOnClickOutside;

    if (hideOnEsc) {
      document.body.addEventListener("keydown", this.handleKeyDown);
    }

    if (hideOnClickOutside) {
      document.body.addEventListener("click", this.handleClickOutside);
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.visible !== this.props.visible) {
      this.applyState();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    document.body.removeEventListener("keydown", this.handleKeyDown);
    document.body.removeEventListener("click", this.handleClickOutside);
  };

  _proto.render = function render() {
    var _this$props6 = this.props,
        unmount = _this$props6.unmount,
        onTransitionEnd = _this$props6.onTransitionEnd;
    var _this$state = this.state,
        visible = _this$state.visible,
        transitioning = _this$state.transitioning;

    if (unmount && !visible && !transitioning) {
      return null;
    }

    return React.createElement(Box.default, __chunk_1._extends({
      "aria-hidden": !visible,
      hidden: !visible && !__chunk_3.hasTransition(this.props)
    }, this.props, this.state, {
      onTransitionEnd: __chunk_5.callAll(this.handleTransitionEnd, onTransitionEnd)
    }));
  };

  return HiddenComponent;
}(React.Component);

var Hidden = styled$1.default(__chunk_4.hoist(HiddenComponent, Box.default))(_templateObject(), __chunk_3.translateWithProps, styledTools.ifProp(__chunk_3.hasTransition, styled.css(_templateObject2(), __chunk_3.originWithProps, styledTools.prop("duration"), styledTools.prop("timing"), styledTools.prop("delay"))), styledTools.ifProp("fade", "opacity: 0"), styledTools.ifProp(__chunk_3.hasTransition, styled.css(_templateObject3(), __chunk_3.slideWithProps, __chunk_3.scaleWithProps), "display: none !important"), styledTools.theme("Hidden")); // @ts-ignore

Hidden.propTypes = {
  visible: PropTypes.bool,
  hide: PropTypes.func,
  hideOnEsc: PropTypes.bool,
  hideOnClickOutside: PropTypes.bool,
  unmount: PropTypes.bool,
  fade: PropTypes.bool,
  expand: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(["center", "top", "right", "bottom", "left"])]),
  slide: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(["top", "right", "bottom", "left"])]),
  duration: PropTypes.string,
  delay: PropTypes.string,
  timing: PropTypes.string,
  animated: PropTypes.bool
};
Hidden.defaultProps = {
  duration: "250ms",
  timing: "ease-in-out"
};
var Hidden$1 = use$1.default(Hidden, "div");

var Hidden$2 = Object.assign(Hidden$1, {
  Container: __chunk_6.HiddenContainer,
  Hide: __chunk_7.HiddenHide,
  Show: __chunk_7.HiddenShow,
  Toggle: __chunk_7.HiddenToggle
});

exports.default = Hidden$2;
